@inject IJSRuntime JSRuntime

@if (ShowHeader)
{
    <div class="d-flex justify-content-between align-items-center" style="background-color: @Parent.Color">
        <div class="mx-2 fw-bold fs-3">@Parent.AbfID</div>
        <div class="pe-3 text-muted">
            <button @onclick="()=>OnSelectPreviousCell.InvokeAsync()"
                    class="btn btn-sm btn-outline-secondary">
                « previous
            </button>
            <button @onclick="()=>OnSelectNextCell.InvokeAsync()"
                    class="btn btn-sm btn-outline-secondary">
                next »
            </button>
        </div>
    </div>
}

<div class="p-2" style="background-color: #e6e6e6;">

    <!-- colors -->
    @foreach (string color in Core.CellsFile.KnownColors.Values)
    {
        <div class="px-2 me-1 mt-1 mb-2 d-inline-block" style="background-color: @color; border: 1px solid #bebebe;">
            <input class="form-check-input p-0"
                   style="margin: 10px 3px;"
                   type="radio"
                   name="radioColor"
                   value=@color
                   checked=@(color == Parent.Color)
               @onchange=ColorSelected />
        </div>
    }


    <!-- comments -->
    <div class="d-flex" style="width: 520px;">
        <input type="text" class="flex-fill form-control form-control-sm d-inline-block" placeholder="comment" @bind=EditComment>
        <button type="button" class="flex-fill btn btn-primary btn-sm ms-2" @onclick=SaveChanges>Save</button>
    </div>

    <!-- tags -->
    <div class="mt-2">
        <div class="d-inline-block">
            <input type="text" class="form-control form-control-sm d-inline-block" placeholder="tag" style="width: 200px;" @bind=EditTag>
            <button type="button" class="flex-fill btn btn-primary btn-sm me-1" @onclick=AddTag>Add Tag</button>
        </div>
        @foreach (string tag in @Tags)
        {
            <div class="tag px-2 d-inline-block">
                <div class="d-inline-block">@tag</div>
                <div class="d-inline-block" style="cursor: pointer" @onclick="()=>DeleteTag(tag)">❌</div>
            </div>
        }
    </div>

</div>

<!-- list of child ABFs -->
@foreach (string abfPath in Parent.ChildAbfPaths)
{
    Core.AbfInfo abf = Core.AbfInfo.FromAbf(abfPath);
    string safeAbfPath = abf.AbfFilePath.Replace("\\", "/");
    string uniqueId = MD5(safeAbfPath);

    <div class="cell-row @(abf.HasComments ? "cell-row-with-comments" : "")">
        <span class="font-monospace">@abf.AbfID</span>

        <div class="d-inline-block me-1" id=@uniqueId>
            <button class="button-small" onclick="CopyToClipboard('@safeAbfPath', '@uniqueId')">copy path</button>
            <button class="button-small" onclick="CopySetpath('@safeAbfPath', '@uniqueId')">setpath</button>
            <button class="button-small" @onclick="() => ClickedIgnore(abf)">ignore</button>
        </div>

        @if (abf.IsValid)
        {
            <div class="info-light d-inline-block">
                <span class="font-monospace">@abf.Protocol</span>
                <span>(@abf.SweepCount sweeps, @abf.LengthMinutes min)</span>
                @if (abf.HasComments)
                {
                    <span class="info-comment ms-1">@abf.Comments</span>
                }
            </div>
        }
        else if (abf.IsLocked)
        {
            <span class="badge rounded-pill bg-secondary">Recording...</span>
        }
        else
        {
            <span class="badge rounded-pill bg-danger">Invalid</span>
        }
    </div>
}

<!-- analysis images for all child ABFs -->
<ImageViewerModal ImageURLs=GetImageUrls(Parent.GetAnalysisImagePaths()) />

@code {
    [Parameter, EditorRequired]
    public AbfParentInfo Parent
    {
        get => _Parent;
        set
        {
            _Parent = value;
            EditComment = value.Comment == "?" ? string.Empty : value.Comment;
            EditColor = value.Color;
            Tags.Clear();
            Tags.AddRange(value.Tags);
        }
    }

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnInfoChanged { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnSelectPreviousCell { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnSelectNextCell { get; set; }

    [Parameter]
    public bool ShowHeader { get; set; } = true;

    private AbfParentInfo _Parent { get; set; } = null!;

    private string EditComment { get; set; } = string.Empty;

    private string EditTag { get; set; } = string.Empty;

    private string EditColor { get; set; } = string.Empty;

    private List<string> Tags { get; set; } = new();

    private int LastUpdateFileCount { get; set; } = 0;

    private static string[] GetImageUrls(AnalysisImagePath[] paths) => paths.Select(x => "/image?path=" + x.ThisPath).ToArray();

    protected override void OnInitialized()
    {
        LastUpdateFileCount = GetFileCount();
    }

    private void SaveChanges()
    {
        string cellsFilePath = Path.Combine(_Parent.AbfFolder, "cells.txt");

        Core.CellsFile cellsFile = File.Exists(cellsFilePath)
            ? new Core.CellsFile(File.ReadAllText(cellsFilePath))
            : new Core.CellsFile("");

        cellsFile.Update(Parent.AbfID, EditColor, EditComment, Tags.ToArray());

        cellsFile.WriteFile(cellsFilePath);

        OnInfoChanged.InvokeAsync();
    }

    private void AddTag()
    {
        if (string.IsNullOrWhiteSpace(EditTag))
            return;

        if (!Tags.Contains(EditTag))
        {
            Tags.Add(EditTag);
            SaveChanges();
        }

        EditTag = string.Empty;
    }

    private void DeleteTag(string tag)
    {
        if (Tags.Contains(tag))
        {
            Tags.Remove(tag);
            SaveChanges();
        }
    }

    public void UpdateEditableFieldsFromParent()
    {
        EditComment = Parent.Comment;
        Tags.Clear();
        Tags.AddRange(Parent.Tags);
    }

    private void ColorSelected(ChangeEventArgs args)
    {
        EditColor = args.Value!.ToString() ?? string.Empty;
    }

    private async Task ClickedIgnore(Core.AbfInfo abf)
    {
        bool confirmResult = await JSRuntime.InvokeAsync<bool>("confirm", "Do you want to ignore this ABF by renaming it?");

        if (confirmResult == true)
        {
            File.Move(abf.AbfFilePath, abf.AbfFilePath + ".ignored");
            await OnInfoChanged.InvokeAsync();
        }
    }

    private static string MD5(string s)
    {
        byte[] bytes = System.Text.ASCIIEncoding.ASCII.GetBytes(s);
        var md5 = System.Security.Cryptography.MD5.Create();
        return string.Join("", md5.ComputeHash(bytes).Select(x => x.ToString("x2")).ToArray());
    }

    /// <summary>
    /// Return the number of files in the ABF and AutoAnalysis folders.
    /// When this number changes, an auto-refresh is warranted.
    /// </summary>
    /// <returns></returns>
    private int GetFileCount()
    {
        int parentFolderFileCount = Directory.GetFiles(Parent.AbfFolder, "*.abf").Length;

        int analysisFolderFileCount = Directory.Exists(Parent.AnalysisFolder)
            ? Directory.GetFiles(Parent.AnalysisFolder).Length
            : 0;

        return parentFolderFileCount + analysisFolderFileCount;
    }

    public async Task AutoRefreshAction()
    {
        int newFileCount = GetFileCount();
        if (newFileCount != LastUpdateFileCount)
        {
            System.Diagnostics.Debug.WriteLine($"File count changed, auto-refreshing");
            LastUpdateFileCount = newFileCount;
            await OnInfoChanged.InvokeAsync();
        }
    }
}
