<div style="font-size: .8em; line-height: 120%; white-space: @(Wrap ? "" : "nowrap");">

    <!-- selected arrow -->
    <span class="fw-bold font-monospace" style="visibility: @ArrowVisibility">»</span>

    <!-- headings -->
    @if (ShowHeading && !string.IsNullOrWhiteSpace(Parent.Header))
    {
        <div class="tag">@Parent.Header</div>
    }

    <!-- clickable AbfID -->
    <a href="" @onclick:preventDefault @onclick=SelectThisParent
       data-bs-toggle="modal" data-bs-target="#@ModalID"
       class="font-monospace" style="background-color: @Parent.Color; color: blue;">
        @Parent.AbfID
    </a>

    <!-- child count -->
    <div class="font-monospace d-inline-block me-1" style="color: #AAAAAA">@Parent.ChildAbfCount</div>

    <!-- tags -->
    @foreach (string tag in Parent.Tags)
    {
        <div class="tag" style="background-color: @GetTagColor(tag); color: #FFFFFFDD;">@tag</div>
    }

    <!-- comment -->
    @if (!string.IsNullOrWhiteSpace(Parent.Comment) && Parent.Comment != "?")
    {
        <span style="font-family: 'Arial Narrow'; color: #AAAAAA">@Parent.Comment</span>
    }

    @if (ClickOpensModal)
    {
        <div class="modal fade"
         id="@ModalID"
         data-bs-keyboard="false"
         tabindex="-1"
         aria-hidden="true">

            <div class="modal-dialog modal-dialog-scrollable modal-xl">
                <div class="modal-content">
                    <div class="modal-header border-bottom" style="background-color: @Parent.Color">
                        <h5 class="modal-title fw-bold">@Parent.AbfID</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body m-0 p-0">
                        @if (ModalHasBeenClicked)
                        {
                            <CellDetails Parent=Parent ShowHeader=false
                                 OnInfoChanged=CellDetailsChangedInModal
                                 OnSelectPreviousCell=SelectPreviousCell
                                 OnSelectNextCell=SelectNextCell />
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public bool IsSelected { get; set; } = false;

    [Parameter, EditorRequired]
    public AbfParentInfo Parent { get; set; } = null!;

    [Parameter, EditorRequired]
    public string[] Tags { get; set; } = Array.Empty<string>();

    [Parameter, EditorRequired]
    public bool ShowHeading { get; set; } = false;

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnSelected { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnSelectNext { get; set; }

    [Parameter, EditorRequired]
    public EventCallback<AbfParentInfo> OnSelectPrevious { get; set; }

    [Parameter]
    public bool Wrap { get; set; } = false;

    [Parameter]
    public bool ClickOpensModal { get; set; } = false;

    private bool ModalHasBeenClicked = false;

    private string ModalID => "modal_" + GetMD5(Parent.AbfID);

    private string ArrowVisibility => IsSelected ? "visible" : "hidden";

    private async Task SelectThisParent()
    {
        ModalHasBeenClicked = true;
        await OnSelected.InvokeAsync();
    }

    private void CellDetailsChangedInModal()
    {
        Parent.UpdateFromDisk();
    }

    private void SelectPreviousCell()
    {
        OnSelectPrevious.InvokeAsync();
    }

    private void SelectNextCell()
    {
        OnSelectNext.InvokeAsync();
    }

    private string GetMD5(string str)
    {
        byte[] bytes = System.Text.Encoding.ASCII.GetBytes(str);
        var md5 = System.Security.Cryptography.MD5.Create();
        return string.Join("", md5.ComputeHash(bytes).Select(x => x.ToString("x2")));
    }

    private string GetTagColor(string tag)
    {
        int i = Array.IndexOf(Tags, tag);

        string[] colors =
        {
            // https://github.com/ScottPlot/ScottPlot/blob/main/src/ScottPlot4/ScottPlot/Palettes/Category10.cs
            "#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd",
            "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf",
    };

        return (i < 0) ? "#CCCCCC" : colors[i % colors.Length];
    }
}
