@page "/AbfFolder"
@inject NavigationManager NavManager
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;
@using ProjectServer.Components;

<PageTitle>ABF Folder: @Path.GetFileName(FolderPath)</PageTitle>

<nav>
    <!-- navigation area -->
    <div class="p-2" style="background-color: #f1f1f1;">

        <div class="d-flex justify-content-between lh-1">
            <div class="title">ABF Browser</div>
            <div><a href="/" style="font-size: .8em;">Home</a></div>
        </div>

        <div class="lh-1" style="font-family: Consolas; font-size: .8em; white-space: nowrap;">

            <!-- show a link to every level of the current folder -->
            @for (int i = 0; i < RootFolderPaths.Length; i++)
            {
                string path = RootFolderPaths[i];
                string folderName = (path.Length < 4) ? path.Trim('\\') : System.IO.Path.GetFileName(path);

                <div>
                    @foreach (var _ in Enumerable.Range(0, i))
                    {
                        <span>&nbsp;</span>
                    }

                    <a href='' @onclick="(()=>SetFolderPath(path))">@folderName</a>
                </div>
            }

            @if (!IsAbfFolder)
            {
                <!-- sub folders -->
                @foreach (string path in SubFolderPaths)
                {
                    <div>
                        @foreach (var _ in Enumerable.Range(0, RootFolderPaths.Length))
                        {
                            <span>&nbsp;</span>
                        }

                        @if (FolderNameContainsIllegalCharacters(@Path.GetFileName(path)))
                        {
                            <span class="bg-danger text-light">@Path.GetFileName(path)</span>
                            <div class="bg-warning p-2 border m-2 rounded">
                                <b>ERROR:</b><br>Folder name contains<br> illegal characters!
                            </div>
                        }
                        else
                        {
                            <a href='' @onclick="(()=>SetFolderPath(path))">@Path.GetFileName(path)</a>
                        }
                    </div>
                }

                <!-- experiment txt -->
                if (File.Exists(Path.Combine(FolderPath, "experiment.txt")))
                {
                    <div>
                        @foreach (var _ in Enumerable.Range(0, RootFolderPaths.Length))
                        {
                            <span>&nbsp;</span>
                        }
                        <span style="opacity: .5;">experiment.txt</span>
                    </div>
                }

                <!-- experiment json -->
                if (File.Exists(Path.Combine(FolderPath, "experiment.json")))
                {
                    <div>
                        @foreach (var _ in Enumerable.Range(0, RootFolderPaths.Length))
                        {
                            <span>&nbsp;</span>
                        }
                        <span style="opacity: .5;">experiment.json</span>
                    </div>
                }
            }
        </div>

        <div class="mt-2 d-flex gap-1">
            <button class="button-small" onclick="CopyToClipboard('@FolderPath.Replace("\\","/")')">copy path</button>
            <button class="button-small" onclick="CopyToClipboard('@GetThisUrl()')">copy URL</button>
            @if (IsAbfFolder)
            {
                <button class="button-small" @onclick=ClickedDailyNotes>daily notes</button>
            }
            else
            {
                <button class="button-small" @onclick=ClickedCreateSubfolder>new folder</button>
            }
        </div>

        @if (IsAbfFolder)
        {
            <div class="form-check mt-2 ms-1" style="font-family: monospace; font-size: .8em;">
                <input class="form-check-input" type="checkbox" @bind=ShowRedCells>
                <label class="form-check-label">
                    Show Red Cells
                </label>
            </div>
        }

    </div>

    <!-- ABF list -->
    @if (IsAbfFolder)
    {
        <div class="p-2 title">ABF Folder</div>
        <CellsMenu @ref="CellsMenuRef"
               FolderPath=@FolderPath
               SelectedParent=@SelectedParent
               OnSelectParent=@OnSelectParent />
    }

</nav>

<main>
    @if (CreateSubfolder)
    {
        <NewFolder FolderPath=@FolderPath OnFolderCreated=@NewFolderCreated />
    }
    else if (!Directory.Exists(FolderPath))
    {
        <div class="px-2 pt-2 title">Folder does not exist</div>
        <div class="px-2"><code>@FolderPath</code></div>
    }
    else if (IsEmptyFolder)
    {
        <AbfDayInfo FolderPath=@FolderPath />
    }
    else if (IsAbfFolder)
    {
        @if (SelectedParent is not null)
        {
            <CellDetails @ref="CellsDetailsRef"
                 Parent=@SelectedParent
                 OnInfoChanged=@UpdateMenuFromDisk
                 OnSelectPreviousCell=SelectPreviousCell
                 OnSelectNextCell=SelectNextCell />
        }
        else
        {
            <AbfDayInfo FolderPath=@FolderPath />
        }
    }
    else
    {
        if (PathContainsAbfFolders(FolderPath))
        {
            <AbfMultiFolder FolderPath="@FolderPath" />
        }
        else
        {
            <div class="p-2 title">Folder does not contain ABF files</div>
            <ExperimentNotesTxt FolderPath="@FolderPath" />
            <ExperimentNotesJson FolderPath="@FolderPath" />
        }
    }
</main>

@code {
    string FolderPath = string.Empty;

    string[] RootFolderPaths = Array.Empty<string>();

    string[] SubFolderPaths = Array.Empty<string>();
    string[] FilePaths = Array.Empty<string>();
    bool IsAbfFolder;
    bool IsEmptyFolder;

    bool ShowRedCells
    {
        get => CellsMenuRef is null ? true : CellsMenuRef.ShowRedCells;
        set
        {
            if (CellsMenuRef is not null)
                CellsMenuRef.ShowRedCells = value;
        }
    }

    private bool CreateSubfolder { get; set; } = false;

    Domain.AbfParentInfo? SelectedParent = null;
    CellsMenu? CellsMenuRef = null!;
    CellDetails? CellsDetailsRef = null!;

    protected override void OnInitialized()
    {
        // read query parameters
        string initialPath = GetQueryString("folder", @"X:\Data");
        string initiaAbfID = GetQueryString("abfid", string.Empty);

        // load this folder
        SetFolderPath(initialPath, updateUrl: false);

        // pre-select the parent of the ABFID given in the query parameter
        if (IsAbfFolder && !string.IsNullOrWhiteSpace(initiaAbfID))
        {
            string childAbfFilePath = Path.Combine(initialPath, initiaAbfID + ".abf");
            foreach (AbfParentInfo parent in AbfParentInfo.GetParentsInFolder(FolderPath))
            {
                if (parent.ChildAbfPaths.Contains(childAbfFilePath))
                {
                    SelectedParent = parent;
                    break;
                }
            }
        }
    }

    private string GetQueryString(string varName, string defaultValue)
    {
        string value = defaultValue;
        Uri uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue(varName, out StringValues folderQueryValues))
        {
            value = folderQueryValues.First();
        }
        return value;
    }

    /// <summary>
    /// Load a folder path in the viewer.
    /// If it is an ABF folder, display it as such.
    /// If not, display it as a file browser.
    /// </summary>
    /// <param name="path"></param>
    private void SetFolderPath(string path, bool updateUrl = true)
    {
        FolderPath = path;
        if (!Directory.Exists(path))
            return;

        RootFolderPaths = GetRootFolderPaths(path);
        SubFolderPaths = Directory.GetDirectories(path);
        FilePaths = Directory.GetFiles(path);
        IsAbfFolder = FilePaths.Where(x => x.EndsWith(".abf")).Any();
        IsEmptyFolder = (FilePaths.Count() < 2) && (SubFolderPaths.Count() == 0);
        CreateSubfolder = false;
        SelectedParent = null;

        if (updateUrl)
            UpdateUrl();
    }

    /// <summary>
    /// Return full paths for every folder level of the given path
    /// </summary>
    private static string[] GetRootFolderPaths(string path)
    {
        path = path.TrimEnd('/');
        path = path.TrimEnd('\\');
        List<string> paths = new();
        while (!string.IsNullOrEmpty(path))
        {
            paths.Insert(0, path);
            path = Path.GetDirectoryName(path) ?? string.Empty;
        }
        return paths.ToArray();
    }

    /// <summary>
    /// Called when the user clicks a parent in the menu
    /// </summary>
    private void OnSelectParent(AbfParentInfo parent)
    {
        SelectedParent = parent;
        UpdateUrl();
    }

    /// <summary>
    /// Called when cells.txt has been modified
    /// </summary>
    private async Task UpdateMenuFromDisk()
    {
        if (CellsMenuRef is null)
            return;

        await CellsMenuRef.UpdateMenuFromDisk();
        StateHasChanged();
    }

    private void SelectPreviousCell()
    {
        System.Diagnostics.Debug.WriteLine("ABF Folder: selecting previous cell...");
        CellsMenuRef?.SelectPrevious();
    }

    private void SelectNextCell()
    {
        System.Diagnostics.Debug.WriteLine("ABF Folder: selecting next cell...");
        CellsMenuRef?.SelectNext();
    }

    private void NewFolderCreated(string path)
    {
        SetFolderPath(path);
    }

    private void ClickedDailyNotes()
    {
        CreateSubfolder = false;
        SelectedParent = null;
        UpdateUrl();
    }

    private void ClickedCreateSubfolder()
    {
        CreateSubfolder = true;
    }

    private void UpdateUrl()
    {
        try
        {
            NavManager.NavigateTo(GetThisUrl());
        }
        catch (Microsoft.AspNetCore.Components.NavigationException ex)
        {
            System.Diagnostics.Debug.WriteLine($"Navigation error: {ex}");
        }
    }

    private string GetThisUrl()
    {
        string path = System.Net.WebUtility.UrlEncode(FolderPath);
        string url = NavManager.BaseUri + $"AbfFolder?folder={path}";
        if (SelectedParent is not null)
            url += $"&abfid={SelectedParent.AbfID}";
        return url;
    }

    private static bool PathContainsAbfFolders(string path)
    {
        if (!Directory.Exists(path))
            return false;

        foreach (string subFolder in Directory.GetDirectories(path))
        {
            if (Directory.GetFiles(subFolder, "*.abf").Any())
                return true;
        }

        return false;
    }

    private static bool FolderNameContainsIllegalCharacters(string folderName)
    {
        string[] illegalCharacters = { "&", "+", "%" };

        foreach (string illegalChar in illegalCharacters)
        {
            if (folderName.Contains(illegalChar))
                return true;
        }

        return false;
    }
}
